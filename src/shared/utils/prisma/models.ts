// This file was auto-generated by prisma-generator-typescript-interfaces

export type BuzzWithdrawalRequestStatus = "Requested" | "Canceled" | "Rejected" | "Approved" | "Reverted" | "Transferred" | "ExternallyResolved";

export type UserPaymentConfigurationProvider = "Stripe" | "Tipalti";

export type RewardsEligibility = "Eligible" | "Ineligible" | "Protected";

export type PaymentProvider = "Stripe" | "Paddle";

export type UserEngagementType = "Follow" | "Hide" | "Block";

export type LinkType = "Sponsorship" | "Social" | "Other";

export type ModelType = "Checkpoint" | "TextualInversion" | "Hypernetwork" | "AestheticGradient" | "LORA" | "LoCon" | "DoRA" | "Controlnet" | "Upscaler" | "MotionModule" | "VAE" | "Poses" | "Wildcards" | "Workflows" | "Detection" | "Other";

export type ImportStatus = "Pending" | "Processing" | "Failed" | "Completed";

export type ModelStatus = "Draft" | "Training" | "Published" | "Scheduled" | "Unpublished" | "UnpublishedViolation" | "GatherInterest" | "Deleted";

export type TrainingStatus = "Pending" | "Submitted" | "Paused" | "Denied" | "Processing" | "InReview" | "Failed" | "Approved";

export type CommercialUse = "None" | "Image" | "RentCivit" | "Rent" | "Sell";

export type CheckpointType = "Trained" | "Merge";

export type ModelUploadType = "Created" | "Trained";

export type ModelUsageControl = "Download" | "Generation" | "InternalGeneration";

export type ModelModifier = "Archived" | "TakenDown";

export type ContentType = "Image" | "Character" | "Text" | "Audio";

export type ModelFlagStatus = "Pending" | "Resolved";

export type ModelEngagementType = "Favorite" | "Hide" | "Mute" | "Notify";

export type ModelVersionSponsorshipSettingsType = "FixedPrice" | "Bidding";

export type ModelVersionMonetizationType = "PaidAccess" | "PaidEarlyAccess" | "PaidGeneration" | "CivitaiClubOnly" | "MySubscribersOnly" | "Sponsored";

export type ModelVersionEngagementType = "Notify";

export type ModelHashType = "AutoV1" | "AutoV2" | "AutoV3" | "SHA256" | "CRC32" | "BLAKE3";

export type ScanResultCode = "Pending" | "Success" | "Danger" | "Error";

export type ModelFileVisibility = "Sensitive" | "Private" | "Public";

export type MetricTimeframe = "Day" | "Week" | "Month" | "Year" | "AllTime";

export type AssociationType = "Suggested";

export type ReportReason = "TOSViolation" | "NSFW" | "Ownership" | "AdminAttention" | "Claim" | "CSAM";

export type ReportStatus = "Pending" | "Processing" | "Actioned" | "Unactioned";

export type ReviewReactions = "Like" | "Dislike" | "Laugh" | "Cry" | "Heart";

export type ImageGenerationProcess = "txt2img" | "txt2imgHiRes" | "img2img" | "inpainting";

export type NsfwLevel = "None" | "Soft" | "Mature" | "X" | "Blocked";

export type ImageIngestionStatus = "Pending" | "Scanned" | "Error" | "Blocked" | "NotFound" | "PendingManualAssignment";

export type MediaType = "image" | "video" | "audio";

export type BlockImageReason = "Ownership" | "CSAM" | "TOS";

export type ImageEngagementType = "Favorite" | "Hide";

export type ImageOnModelType = "Example" | "Training";

export type TagTarget = "Model" | "Question" | "Image" | "Post" | "Tag" | "Article" | "Bounty" | "Collection";

export type TagType = "UserGenerated" | "Label" | "Moderation" | "System";

export type TagsOnTagsType = "Parent" | "Replace" | "Append";

export type TagSource = "User" | "Rekognition" | "WD14" | "Computed" | "ImageHash" | "Hive" | "MinorDetection" | "HiveDemographics";

export type PartnerPricingModel = "Duration" | "PerImage";

export type ApiKeyType = "System" | "User";

export type KeyScope = "Read" | "Write" | "Generate";

export type TagEngagementType = "Hide" | "Follow" | "Allow";

export type CosmeticType = "Badge" | "NamePlate" | "ContentDecoration" | "ProfileDecoration" | "ProfileBackground";

export type CosmeticSource = "Trophy" | "Purchase" | "Event" | "Membership" | "Claim";

export type CosmeticEntity = "Model" | "Image" | "Article" | "Post";

export type BuzzAccountType = "user" | "generation" | "club";

export type ArticleStatus = "Draft" | "Published" | "Unpublished";

export type ArticleEngagementType = "Favorite" | "Hide";

export type GenerationSchedulers = "EulerA" | "Euler" | "LMS" | "Heun" | "DPM2" | "DPM2A" | "DPM2SA" | "DPM2M" | "DPMSDE" | "DPMFast" | "DPMAdaptive" | "LMSKarras" | "DPM2Karras" | "DPM2AKarras" | "DPM2SAKarras" | "DPM2MKarras" | "DPMSDEKarras" | "DDIM";

export type CollectionWriteConfiguration = "Private" | "Public" | "Review";

export type CollectionReadConfiguration = "Private" | "Public" | "Unlisted";

export type CollectionType = "Model" | "Article" | "Post" | "Image";

export type CollectionMode = "Contest" | "Bookmark";

export type CollectionItemStatus = "ACCEPTED" | "REVIEW" | "REJECTED";

export type CollectionContributorPermission = "VIEW" | "ADD" | "ADD_REVIEW" | "MANAGE";

export type HomeBlockType = "Collection" | "Announcement" | "Leaderboard" | "Social" | "Event" | "CosmeticShop";

export type Currency = "USD" | "BUZZ";

export type BountyType = "ModelCreation" | "LoraCreation" | "EmbedCreation" | "DataSetCreation" | "DataSetCaption" | "ImageCreation" | "VideoCreation" | "Other";

export type BountyMode = "Individual" | "Split";

export type BountyEntryMode = "Open" | "BenefactorsOnly";

export type BountyEngagementType = "Favorite" | "Track";

export type CsamReportType = "Image" | "TrainingData";

export type Availability = "Public" | "Unsearchable" | "Private" | "EarlyAccess";

export type EntityCollaboratorStatus = "Pending" | "Approved" | "Rejected";

export type ClubAdminPermission = "ManageMemberships" | "ManageTiers" | "ManagePosts" | "ManageClub" | "ManageResources" | "ViewRevenue" | "WithdrawRevenue";

export type ChatMemberStatus = "Invited" | "Joined" | "Ignored" | "Left" | "Kicked";

export type ChatMessageType = "Markdown" | "Image" | "Video" | "Audio" | "Embed";

export type PurchasableRewardUsage = "SingleUse" | "MultiUse";

export type EntityType = "Image" | "Post" | "Article" | "Bounty" | "BountyEntry" | "ModelVersion" | "Model" | "Collection";

export type JobQueueType = "CleanUp" | "UpdateMetrics" | "UpdateNsfwLevel" | "UpdateSearchIndex" | "CleanIfEmpty";

export type VaultItemStatus = "Pending" | "Stored" | "Failed";

export type RedeemableCodeType = "Buzz" | "Membership";

export type ToolType = "Image" | "Video" | "MotionCapture" | "Upscalers" | "Audio" | "Compute" | "GameEngines" | "Editor" | "LLM";

export type TechniqueType = "Image" | "Video";

export type AppealStatus = "Pending" | "Approved" | "Rejected";

export type EntityMetric_EntityType_Type = "Image";

export type EntityMetric_MetricType_Type = "ReactionLike" | "ReactionHeart" | "ReactionLaugh" | "ReactionCry" | "Comment" | "Collection" | "Buzz";

export interface Account {
  id: number;
  userId: number;
  type: string;
  provider: string;
  providerAccountId: string;
  refresh_token: string | null;
  access_token: string | null;
  expires_at: number | null;
  token_type: string | null;
  scope: string | null;
  id_token: string | null;
  session_state: string | null;
  metadata: JsonValue;
  user?: User;
}

export interface Session {
  id: number;
  sessionToken: string;
  userId: number;
  expires: Date;
  user?: User;
}

export interface SessionInvalidation {
  userId: number;
  user?: User;
  invalidatedAt: Date;
}

export interface UserReferral {
  id: number;
  userReferralCodeId: number | null;
  userReferralCode?: UserReferralCode | null;
  source: string | null;
  landingPage: string | null;
  loginRedirectReason: string | null;
  createdAt: Date;
  userId: number;
  user?: User;
  note: string | null;
}

export interface UserReferralCode {
  id: number;
  userId: number;
  user?: User;
  code: string;
  note: string | null;
  deletedAt: Date | null;
  createdAt: Date;
  referees?: UserReferral[];
}

export interface UserPaymentConfiguration {
  userId: number;
  user?: User;
  tipaltiAccountId: string | null;
  tipaltiAccountStatus: string;
  tipaltiPaymentsEnabled: boolean;
  stripeAccountId: string | null;
  stripeAccountStatus: string;
  stripePaymentsEnabled: boolean;
  meta: JsonValue;
}

export interface BuzzWithdrawalRequestHistory {
  id: string;
  requestId: string;
  request?: BuzzWithdrawalRequest;
  updatedById: number;
  updatedBy?: User;
  status: BuzzWithdrawalRequestStatus;
  note: string | null;
  createdAt: Date;
  metadata: JsonValue;
}

export interface BuzzWithdrawalRequest {
  id: string;
  userId: number | null;
  user?: User | null;
  requestedToProvider: UserPaymentConfigurationProvider;
  requestedToId: string;
  buzzWithdrawalTransactionId: string;
  requestedBuzzAmount: number;
  platformFeeRate: number;
  transferredAmount: number | null;
  transferId: string | null;
  currency: Currency | null;
  metadata: JsonValue;
  createdAt: Date;
  updatedAt: Date;
  status: BuzzWithdrawalRequestStatus;
  history?: BuzzWithdrawalRequestHistory[];
}

export interface User {
  id: number;
  name: string | null;
  username: string | null;
  email: string | null;
  emailVerified: Date | null;
  image: string | null;
  showNsfw: boolean;
  blurNsfw: boolean;
  browsingLevel: number;
  onboarding: number;
  isModerator: boolean | null;
  createdAt: Date;
  deletedAt: Date | null;
  subscriptionId: string | null;
  subscription?: CustomerSubscription | null;
  mutedAt: Date | null;
  muted: boolean;
  muteConfirmedAt: Date | null;
  bannedAt: Date | null;
  autoplayGifs: boolean | null;
  filePreferences: JsonValue;
  meta: JsonValue | null;
  leaderboardShowcase: string | null;
  referral?: UserReferral | null;
  excludeFromLeaderboards: boolean;
  rewardsEligibility: RewardsEligibility;
  eligibilityChangedAt: Date | null;
  customerId: string | null;
  paddleCustomerId: string | null;
  profile?: UserProfile | null;
  profilePictureId: number | null;
  profilePicture?: Image | null;
  settings: JsonValue | null;
  publicSettings: JsonValue | null;
  paymentConfiguration?: UserPaymentConfiguration | null;
  accounts?: Account[];
  sessions?: Session[];
  images?: Image[];
  models?: Model[];
  deletedModels?: Model[];
  saves?: SavedModel[];
  imports?: Import[];
  keys?: ApiKey[];
  links?: UserLink[];
  comments?: Comment[];
  commentReactions?: CommentReaction[];
  notificationSettings?: UserNotificationSettings[];
  webhooks?: Webhook[];
  interests?: ModelInterest[];
  engagingUsers?: UserEngagement[];
  engagedUsers?: UserEngagement[];
  engagedModels?: ModelEngagement[];
  engagedModelVersions?: ModelVersionEngagement[];
  metrics?: UserMetric[];
  reports?: Report[];
  questions?: Question[];
  answers?: Answer[];
  commentsv2?: CommentV2[];
  questionReactions?: QuestionReaction[];
  answerReactions?: AnswerReaction[];
  commentV2Reactions?: CommentV2Reaction[];
  answerVotes?: AnswerVote[];
  tagsEngaged?: TagEngagement[];
  imageReactions?: ImageReaction[];
  sessionInvalidation?: SessionInvalidation[];
  stats?: UserStat | null;
  rank?: UserRank | null;
  downloads?: DownloadHistory[];
  purchases?: Purchase[];
  cosmetics?: UserCosmetic[];
  postReactions?: PostReaction[];
  posts?: Post[];
  resourceReviews?: ResourceReview[];
  tagImageVotes?: TagsOnImageVote[];
  tagModelVotes?: TagsOnModelsVote[];
  tagPostVotes?: TagsOnPostVote[];
  resourceReviewReactions?: ResourceReviewReaction[];
  articleReactions?: ArticleReaction[];
  articles?: Article[];
  articleEngagements?: ArticleEngagement[];
  leaderboardResults?: LeaderboardResult[];
  receivedReports?: UserReport[];
  engagedImages?: ImageEngagement[];
  collections?: Collection[];
  collectionItems?: CollectionItem[];
  reviewedCollectionItems?: CollectionItem[];
  contributingCollections?: CollectionContributor[];
  homeBlocks?: HomeBlock[];
  bounties?: Bounty[];
  bountyEntries?: BountyEntry[];
  sponsoredBounties?: BountyBenefactor[];
  engagedBounties?: BountyEngagement[];
  bountyEntryReactions?: BountyEntryReaction[];
  referralCodes?: UserReferralCode[];
  clubs?: Club[];
  memberships?: ClubMembership[];
  addedClubPosts?: ClubPost[];
  accessGrantedBy?: EntityAccess[];
  clubAdmin?: ClubAdmin[];
  clubPostReactions?: ClubPostReaction[];
  withdrawalRequests?: BuzzWithdrawalRequest[];
  actionedWithdrawalRequests?: BuzzWithdrawalRequestHistory[];
  chatMembers?: ChatMember[];
  chatMessages?: ChatMessage[];
  chatOwners?: Chat[];
  builds?: BuildGuide[];
  createdRewards?: PurchasableReward[];
  purchasedRewards?: UserPurchasedRewards[];
  VaultItem?: VaultItem[];
  Vault?: Vault[];
  redeemedCodes?: RedeemableCode[];
  addedCosmeticShopSections?: CosmeticShopSection[];
  addedCosmeticShopItems?: CosmeticShopItem[];
  purchasedCosmetics?: UserCosmeticShopPurchases[];
  donationGoals?: DonationGoal[];
  donations?: Donation[];
  collaboratingOn?: EntityCollaborator[];
  collaborationsCreated?: EntityCollaborator[];
  adTokens?: AdToken[];
  ratingRequests?: ImageRatingRequest[];
  collectionItemScores?: CollectionItemScore[];
  appeals?: Appeal[];
  resolvedAppeals?: Appeal[];
}

export interface CustomerSubscription {
  id: string;
  userId: number;
  user?: User;
  metadata: JsonValue;
  status: string;
  priceId: string;
  price?: Price;
  productId: string;
  product?: Product;
  cancelAtPeriodEnd: boolean;
  cancelAt: Date | null;
  canceledAt: Date | null;
  currentPeriodStart: Date;
  currentPeriodEnd: Date;
  createdAt: Date;
  endedAt: Date | null;
  updatedAt: Date | null;
}

export interface Product {
  id: string;
  active: boolean;
  name: string;
  description: string | null;
  metadata: JsonValue;
  defaultPriceId: string | null;
  provider: PaymentProvider;
  prices?: Price[];
  customerSubscriptions?: CustomerSubscription[];
  purchases?: Purchase[];
}

export interface Price {
  id: string;
  productId: string;
  product?: Product;
  active: boolean;
  currency: string;
  description: string | null;
  type: string;
  unitAmount: number | null;
  interval: string | null;
  intervalCount: number | null;
  metadata: JsonValue;
  customerSubscriptions?: CustomerSubscription[];
  purchases?: Purchase[];
  provider: PaymentProvider;
}

export interface Purchase {
  id: number;
  userId: number;
  customer?: User;
  productId: string | null;
  product?: Product | null;
  priceId: string | null;
  price?: Price | null;
  status: string | null;
  createdAt: Date;
}

export interface UserEngagement {
  userId: number;
  user?: User;
  targetUserId: number;
  targetUser?: User;
  type: UserEngagementType;
  createdAt: Date;
}

export interface UserMetric {
  user?: User;
  userId: number;
  timeframe: MetricTimeframe;
  followingCount: number;
  followerCount: number;
  reactionCount: number;
  hiddenCount: number;
  uploadCount: number;
  reviewCount: number;
  answerCount: number;
  answerAcceptCount: number;
  updatedAt: Date;
}

export interface UserLink {
  id: number;
  userId: number;
  user?: User;
  url: string;
  type: LinkType;
}

export interface VerificationToken {
  identifier: string;
  token: string;
  expires: Date;
}

export interface Import {
  id: number;
  userId: number | null;
  user?: User | null;
  createdAt: Date;
  startedAt: Date | null;
  finishedAt: Date | null;
  source: string;
  status: ImportStatus;
  data: JsonValue | null;
  parentId: number | null;
  parent?: Import | null;
  modelVersion?: ModelVersion[];
  model?: Model | null;
  children?: Import[];
  importId: number | null;
}

export interface Model {
  id: number;
  name: string;
  description: string | null;
  type: ModelType;
  createdAt: Date;
  updatedAt: Date;
  lastVersionAt: Date | null;
  nsfw: boolean;
  tosViolation: boolean;
  poi: boolean;
  minor: boolean;
  userId: number;
  user?: User;
  status: ModelStatus;
  publishedAt: Date | null;
  fromImport?: Import | null;
  fromImportId: number | null;
  meta: JsonValue;
  deletedAt: Date | null;
  deletedBy: number | null;
  deletedByUser?: User | null;
  checkpointType: CheckpointType | null;
  uploadType: ModelUploadType;
  locked: boolean;
  underAttack: boolean;
  earlyAccessDeadline: Date | null;
  mode: ModelModifier | null;
  unlisted: boolean;
  gallerySettings: JsonValue;
  availability: Availability;
  nsfwLevel: number;
  lockedProperties: string[];
  scannedAt: Date | null;
  allowNoCredit: boolean;
  allowCommercialUse: CommercialUse[];
  allowDerivatives: boolean;
  allowDifferentLicense: boolean;
  modelVersions?: ModelVersion[];
  tagsOnModels?: TagsOnModels[];
  tagsOnModelsVotes?: TagsOnModelsVote[];
  tags?: ModelTag[];
  metrics?: ModelMetric[];
  saves?: SavedModel[];
  reports?: ModelReport[];
  engagements?: ModelEngagement[];
  comments?: Comment[];
  interests?: ModelInterest[];
  licenses?: License[];
  reportStats?: ModelReportStat | null;
  hashes?: ModelHash[];
  threads?: Thread[];
  resourceReviews?: ResourceReview[];
  metricsDaily?: ModelMetricDaily[];
  associatedFrom?: ModelAssociations[];
  associations?: ModelAssociations[];
  collectionItems?: CollectionItem[];
  generationCoverage?: GenerationCoverage[];
  flags?: ModelFlag[];
}

export interface ModelFlag {
  modelId: number;
  model?: Model;
  poi: boolean;
  minor: boolean;
  nsfw: boolean;
  triggerWords: boolean;
  poiName: boolean;
  status: ModelFlagStatus;
  details: JsonValue | null;
  createdAt: Date;
}

export interface License {
  id: number;
  name: string;
  url: string;
  models?: Model[];
}

export interface ModelInterest {
  userId: number;
  user?: User;
  modelId: number;
  model?: Model;
  createdAt: Date;
}

export interface ModelEngagement {
  userId: number;
  user?: User;
  modelId: number;
  model?: Model;
  type: ModelEngagementType;
  createdAt: Date;
}

export interface ModelVersionSponsorshipSettings {
  id: number;
  modelVersionMonetizationId: number;
  modelVersionMonetization?: ModelVersionMonetization;
  type: ModelVersionSponsorshipSettingsType;
  currency: Currency;
  unitAmount: number;
}

export interface ModelVersionMonetization {
  id: number;
  modelVersionId: number;
  modelVersion?: ModelVersion;
  type: ModelVersionMonetizationType;
  currency: Currency;
  unitAmount: number | null;
  sponsorshipSettings?: ModelVersionSponsorshipSettings | null;
}

export interface ModelVersion {
  id: number;
  index: number | null;
  name: string;
  description: string | null;
  modelId: number;
  model?: Model;
  trainedWords: string[];
  steps: number | null;
  epochs: number | null;
  clipSkip: number | null;
  vaeId: number | null;
  vae?: ModelVersion | null;
  createdAt: Date;
  updatedAt: Date;
  publishedAt: Date | null;
  status: ModelStatus;
  trainingStatus: TrainingStatus | null;
  trainingDetails: JsonValue | null;
  fromImport?: Import | null;
  fromImportId: number | null;
  inaccurate: boolean;
  baseModel: string;
  baseModelType: string | null;
  meta: JsonValue;
  requireAuth: boolean;
  settings: JsonValue | null;
  availability: Availability;
  nsfwLevel: number;
  earlyAccessEndsAt: Date | null;
  earlyAccessConfig: JsonValue | null;
  uploadType: ModelUploadType;
  usageControl: ModelUsageControl;
  monetization?: ModelVersionMonetization | null;
  metrics?: ModelVersionMetric[];
  files?: ModelFile[];
  runStrategies?: RunStrategy[];
  engagements?: ModelVersionEngagement[];
  downloads?: DownloadHistory[];
  imageResources?: ImageResource[];
  posts?: Post[];
  resourceReviews?: ResourceReview[];
  hashes?: ModelHash[];
  metricsDaily?: ModelMetricDaily[];
  modelVersionExploration?: ModelVersionExploration[];
  vaeFor?: ModelVersion[];
  generationCoverage?: GenerationCoverage | null;
  recommendedResources?: RecommendedResource[];
  recommendedTo?: RecommendedResource[];
  DonationGoal?: DonationGoal[];
}

export interface ModelVersionEngagement {
  userId: number;
  user?: User;
  modelVersionId: number;
  modelVersion?: ModelVersion;
  type: ModelVersionEngagementType;
  createdAt: Date;
}

export interface RecommendedResource {
  id: number;
  resourceId: number;
  resource?: ModelVersion;
  sourceId: number | null;
  source?: ModelVersion | null;
  settings: JsonValue | null;
}

export interface ModelFileHash {
  file?: ModelFile;
  fileId: number;
  type: ModelHashType;
  hash: string;
  createdAt: Date;
}

export interface ModelFile {
  id: number;
  name: string;
  overrideName: string | null;
  url: string;
  sizeKB: number;
  createdAt: Date;
  type: string;
  modelVersionId: number;
  modelVersion?: ModelVersion;
  pickleScanResult: ScanResultCode;
  exists: boolean | null;
  pickleScanMessage: string | null;
  virusScanResult: ScanResultCode;
  virusScanMessage: string | null;
  scannedAt: Date | null;
  scanRequestedAt: Date | null;
  rawScanResult: JsonValue | null;
  hashes?: ModelFileHash[];
  metadata: JsonValue | null;
  headerData: JsonValue | null;
  visibility: ModelFileVisibility;
  dataPurged: boolean;
}

export interface File {
  id: number;
  name: string;
  url: string;
  sizeKB: number;
  createdAt: Date;
  entityId: number;
  entityType: string;
  metadata: JsonValue | null;
}

export interface ModelMetric {
  model?: Model;
  modelId: number;
  timeframe: MetricTimeframe;
  rating: number;
  ratingCount: number;
  downloadCount: number;
  favoriteCount: number;
  commentCount: number;
  collectedCount: number;
  imageCount: number;
  tippedCount: number;
  tippedAmountCount: number;
  generationCount: number;
  thumbsUpCount: number;
  thumbsDownCount: number;
  updatedAt: Date;
}

export interface ModelVersionMetric {
  modelVersion?: ModelVersion;
  modelVersionId: number;
  timeframe: MetricTimeframe;
  rating: number;
  ratingCount: number;
  downloadCount: number;
  favoriteCount: number;
  commentCount: number;
  collectedCount: number;
  imageCount: number;
  tippedCount: number;
  tippedAmountCount: number;
  generationCount: number;
  thumbsUpCount: number;
  thumbsDownCount: number;
  updatedAt: Date;
}

export interface ModelMetricDaily {
  modelId: number;
  model?: Model;
  modelVersionId: number;
  modelVersion?: ModelVersion;
  type: string;
  date: Date;
  count: number;
}

export interface ModelAssociations {
  id: number;
  fromModelId: number;
  fromModel?: Model;
  toModelId: number | null;
  toModel?: Model | null;
  toArticleId: number | null;
  toArticle?: Article | null;
  associatedById: number | null;
  createdAt: Date;
  type: AssociationType;
  index: number | null;
}

export interface DownloadHistory {
  userId: number;
  modelVersionId: number;
  user?: User;
  modelVersion?: ModelVersion;
  downloadAt: Date;
  hidden: boolean;
}

export interface ModActivity {
  id: number;
  userId: number | null;
  activity: string;
  entityType: string | null;
  entityId: number | null;
  createdAt: Date;
}

export interface Report {
  id: number;
  userId: number;
  user?: User;
  reason: ReportReason;
  createdAt: Date;
  details: JsonValue | null;
  internalNotes: string | null;
  previouslyReviewedCount: number;
  alsoReportedBy: number[];
  status: ReportStatus;
  statusSetAt: Date | null;
  statusSetBy: number | null;
  model?: ModelReport | null;
  comment?: CommentReport | null;
  commentV2?: CommentV2Report | null;
  image?: ImageReport | null;
  resourceReview?: ResourceReviewReport | null;
  article?: ArticleReport | null;
  post?: PostReport | null;
  reportedUser?: UserReport | null;
  collection?: CollectionReport | null;
  bounty?: BountyReport | null;
  bountyEntry?: BountyEntryReport | null;
  chat?: ChatReport | null;
}

export interface ResourceReviewReport {
  resourceReviewId: number;
  resourceReview?: ResourceReview;
  reportId: number;
  report?: Report;
}

export interface ModelReport {
  modelId: number;
  model?: Model;
  reportId: number;
  report?: Report;
}

export interface CommentReport {
  commentId: number;
  comment?: Comment;
  reportId: number;
  report?: Report;
}

export interface CommentV2Report {
  commentV2Id: number;
  commentV2?: CommentV2;
  reportId: number;
  report?: Report;
}

export interface ImageReport {
  imageId: number;
  image?: Image;
  reportId: number;
  report?: Report;
}

export interface ArticleReport {
  articleId: number;
  article?: Article;
  reportId: number;
  report?: Report;
}

export interface PostReport {
  postId: number;
  post?: Post;
  reportId: number;
  report?: Report;
}

export interface UserReport {
  userId: number;
  user?: User;
  reportId: number;
  report?: Report;
}

export interface CollectionReport {
  collectionId: number;
  collection?: Collection;
  reportId: number;
  report?: Report;
}

export interface BountyReport {
  bountyId: number;
  bounty?: Bounty;
  reportId: number;
  report?: Report;
}

export interface BountyEntryReport {
  bountyEntryId: number;
  bountyEntry?: BountyEntry;
  reportId: number;
  report?: Report;
}

export interface ChatReport {
  chatId: number;
  chat?: Chat;
  reportId: number;
  report?: Report;
}

export interface ResourceReview {
  id: number;
  modelId: number;
  model?: Model;
  modelVersionId: number;
  modelVersion?: ModelVersion;
  rating: number;
  recommended: boolean;
  details: string | null;
  userId: number;
  user?: User;
  thread?: Thread | null;
  createdAt: Date;
  updatedAt: Date;
  exclude: boolean;
  nsfw: boolean;
  tosViolation: boolean;
  metadata: JsonValue | null;
  reactions?: ResourceReviewReaction[];
  helper?: ResourceReviewHelper | null;
  reports?: ResourceReviewReport[];
}

export interface ResourceReviewReaction {
  id: number;
  review?: ResourceReview;
  reviewId: number;
  user?: User;
  userId: number;
  reaction: ReviewReactions;
  createdAt: Date;
  updatedAt: Date;
}

export interface Post {
  id: number;
  nsfw: boolean;
  title: string | null;
  detail: string | null;
  userId: number;
  user?: User;
  modelVersionId: number | null;
  modelVersion?: ModelVersion | null;
  createdAt: Date;
  updatedAt: Date;
  publishedAt: Date | null;
  metadata: JsonValue | null;
  tosViolation: boolean;
  collectionId: number | null;
  collection?: Collection | null;
  unlisted: boolean;
  availability: Availability;
  nsfwLevel: number;
  images?: Image[];
  tags?: TagsOnPost[];
  reactions?: PostReaction[];
  thread?: Thread | null;
  helper?: PostHelper | null;
  stats?: PostStat | null;
  metrics?: PostMetric[];
  resourceHelper?: PostResourceHelper[];
  imageTags?: PostImageTag[];
  tagsComposite?: PostTag[];
  tagVotes?: TagsOnPostVote[];
  reports?: PostReport[];
  collectionItems?: CollectionItem[];
}

export interface PostMetric {
  postId: number;
  post?: Post;
  timeframe: MetricTimeframe;
  likeCount: number;
  dislikeCount: number;
  laughCount: number;
  cryCount: number;
  heartCount: number;
  commentCount: number;
  collectedCount: number;
  updatedAt: Date;
}

export interface Image {
  id: number;
  pHash: bigint | null;
  name: string | null;
  url: string;
  user?: User;
  userId: number;
  createdAt: Date;
  updatedAt: Date;
  meta: JsonValue | null;
  hash: string | null;
  height: number | null;
  width: number | null;
  type: MediaType;
  metadata: JsonValue;
  nsfw: NsfwLevel;
  nsfwLevel: number;
  nsfwLevelLocked: boolean;
  tosViolation: boolean;
  analysis: JsonValue | null;
  generationProcess: ImageGenerationProcess | null;
  featuredAt: Date | null;
  postId: number | null;
  post?: Post | null;
  needsReview: string | null;
  hideMeta: boolean;
  index: number | null;
  scannedAt: Date | null;
  scanRequestedAt: Date | null;
  mimeType: string | null;
  sizeKB: number | null;
  ingestion: ImageIngestionStatus;
  blockedFor: string | null;
  scanJobs: JsonValue | null;
  assignedUser?: User | null;
  sortAt: Date;
  minor: boolean;
  reports?: ImageReport[];
  reactions?: ImageReaction[];
  thread?: Thread | null;
  tags?: TagsOnImage[];
  tagVotes?: TagsOnImageVote[];
  tagComposites?: ImageTag[];
  metrics?: ImageMetric[];
  stats?: ImageStat | null;
  modHelper?: ImageModHelper | null;
  resources?: ImageResource[];
  resourceHelper?: ImageResourceHelper[];
  engagements?: ImageEngagement[];
  collectionItems?: CollectionItem[];
  collections?: Collection[];
  connections?: ImageConnection[];
  UserProfile?: UserProfile[];
  clubCover?: Club[];
  clubHeader?: Club[];
  clubAvatar?: Club[];
  clubTierCover?: ClubTier[];
  clubPostCoverImage?: ClubPost[];
  article?: Article | null;
  purchasableRewards?: PurchasableReward[];
  tools?: ImageTool[];
  techniques?: ImageTechnique[];
  CosmeticShopSection?: CosmeticShopSection[];
  flags?: ImageFlag[];
  ratingRequests?: ImageRatingRequest[];
}

export interface ImageFlag {
  imageId: number;
  image?: Image;
  promptNsfw: boolean;
  resourcesNsfw: boolean;
}

export interface BlockedImage {
  hash: bigint;
  reason: BlockImageReason;
  createdAt: Date;
}

export interface ImageConnection {
  imageId: number;
  image?: Image;
  entityId: number;
  entityType: string;
}

export interface ImageEngagement {
  userId: number;
  user?: User;
  imageId: number;
  image?: Image;
  type: ImageEngagementType;
  createdAt: Date;
}

export interface ImageResource {
  id: number;
  modelVersionId: number | null;
  modelVersion?: ModelVersion | null;
  name: string | null;
  hash: string | null;
  imageId: number;
  image?: Image;
  strength: number | null;
  detected: boolean;
}

export interface ImageMetric {
  image?: Image;
  imageId: number;
  timeframe: MetricTimeframe;
  likeCount: number;
  dislikeCount: number;
  laughCount: number;
  cryCount: number;
  heartCount: number;
  commentCount: number;
  collectedCount: number;
  tippedCount: number;
  tippedAmountCount: number;
  viewCount: number;
  reactionCount: number;
  updatedAt: Date;
}

export interface ImageRatingRequest {
  userId: number;
  user?: User;
  imageId: number;
  image?: Image;
  createdAt: Date;
  nsfwLevel: number;
  status: ReportStatus;
  weight: number;
}

export interface CollectionMetric {
  collection?: Collection;
  collectionId: number;
  timeframe: MetricTimeframe;
  followerCount: number;
  itemCount: number;
  contributorCount: number;
  updatedAt: Date;
}

export interface Tag {
  id: number;
  name: string;
  color: string | null;
  createdAt: Date;
  updatedAt: Date;
  target: TagTarget[];
  type: TagType;
  nsfw: NsfwLevel;
  nsfwLevel: number;
  unlisted: boolean;
  unfeatured: boolean;
  isCategory: boolean;
  adminOnly: boolean;
  toTags?: TagsOnTags[];
  fromTags?: TagsOnTags[];
  tagsOnModels?: TagsOnModels[];
  tagsOnModelsVotes?: TagsOnModelsVote[];
  tagsOnQuestion?: TagsOnQuestions[];
  tagsOnImage?: TagsOnImage[];
  tagsOnImageVotes?: TagsOnImageVote[];
  tagsOnPosts?: TagsOnPost[];
  tagsOnArticles?: TagsOnArticle[];
  tagsOnCollection?: TagsOnCollection[];
  tagsOnImageComposite?: ImageTag[];
  tagsOnModelComposite?: ModelTag[];
  usersEngaged?: TagEngagement[];
  metrics?: TagMetric[];
  stats?: TagStat | null;
  rank?: TagRank | null;
  tagsOnPostComposite?: PostTag[];
  tagsOnPostVotes?: TagsOnPostVote[];
  tagsOnBounties?: TagsOnBounty[];
  CollectionItem?: CollectionItem[];
}

export interface TagsOnTags {
  fromTagId: number;
  fromTag?: Tag;
  toTagId: number;
  toTag?: Tag;
  type: TagsOnTagsType;
  createdAt: Date;
}

export interface TagsOnModels {
  model?: Model;
  modelId: number;
  tag?: Tag;
  tagId: number;
  createdAt: Date;
}

export interface TagsOnModelsVote {
  modelId: number;
  model?: Model;
  tagId: number;
  tag?: Tag;
  userId: number;
  user?: User;
  vote: number;
  createdAt: Date;
}

export interface TagsOnQuestions {
  question?: Question;
  questionId: number;
  tag?: Tag;
  tagId: number;
}

export interface TagsOnImage {
  imageId: number;
  image?: Image;
  tagId: number;
  tag?: Tag;
  createdAt: Date;
  automated: boolean;
  confidence: number | null;
  disabled: boolean;
  disabledAt: Date | null;
  needsReview: boolean;
  source: TagSource;
}

export interface TagsOnImageVote {
  imageId: number;
  image?: Image;
  tagId: number;
  tag?: Tag;
  userId: number;
  user?: User;
  vote: number;
  createdAt: Date;
  applied: boolean;
}

export interface TagsOnPost {
  postId: number;
  post?: Post;
  tagId: number;
  tag?: Tag;
  createdAt: Date;
  confidence: number | null;
  disabled: boolean;
  needsReview: boolean;
}

export interface TagsOnArticle {
  articleId: number;
  article?: Article;
  tagId: number;
  tag?: Tag;
  createdAt: Date;
}

export interface TagsOnBounty {
  bountyId: number;
  bounty?: Bounty;
  tagId: number;
  tag?: Tag;
  createdAt: Date;
}

export interface TagsOnPostVote {
  postId: number;
  post?: Post;
  tagId: number;
  tag?: Tag;
  userId: number;
  user?: User;
  vote: number;
  createdAt: Date;
}

export interface TagMetric {
  tag?: Tag;
  tagId: number;
  timeframe: MetricTimeframe;
  modelCount: number;
  imageCount: number;
  postCount: number;
  articleCount: number;
  hiddenCount: number;
  followerCount: number;
  updatedAt: Date;
}

export interface SavedModel {
  model?: Model;
  modelId: number;
  user?: User;
  userId: number;
  createdAt: Date;
  updatedAt: Date;
}

export interface RunStrategy {
  modelVersionId: number;
  modelVersion?: ModelVersion;
  partnerId: number;
  partner?: Partner;
  url: string;
  createdAt: Date;
}

export interface Partner {
  id: number;
  name: string;
  homepage: string | null;
  tos: string | null;
  privacy: string | null;
  startupTime: number | null;
  onDemand: boolean;
  onDemandStrategy: string | null;
  onDemandTypes: ModelType[];
  onDemandBaseModels: string[];
  stepsPerSecond: number;
  pricingModel: PartnerPricingModel;
  price: string;
  about: string | null;
  createdAt: Date;
  nsfw: boolean;
  poi: boolean;
  personal: boolean;
  token: string | null;
  tier: number;
  logo: string | null;
  disabled: boolean;
  runStrategies?: RunStrategy[];
}

export interface KeyValue {
  key: string;
  value: JsonValue;
}

export interface ApiKey {
  id: number;
  key: string;
  name: string;
  scope: KeyScope[];
  userId: number;
  user?: User;
  createdAt: Date;
  type: ApiKeyType;
  expiresAt: Date | null;
}

export interface AdToken {
  id: number;
  token: string;
  userId: number;
  user?: User;
  createdAt: Date;
  expiresAt: Date | null;
}

export interface Comment {
  id: number;
  content: string;
  createdAt: Date;
  updatedAt: Date;
  nsfw: boolean;
  tosViolation: boolean;
  parent?: Comment | null;
  parentId: number | null;
  user?: User;
  userId: number;
  model?: Model;
  modelId: number;
  locked: boolean | null;
  hidden: boolean | null;
  comments?: Comment[];
  reactions?: CommentReaction[];
  reports?: CommentReport[];
}

export interface CommentReaction {
  id: number;
  commentId: number;
  comment?: Comment;
  userId: number;
  user?: User;
  reaction: ReviewReactions;
  createdAt: Date;
  updatedAt: Date;
}

export interface Log {
  id: string;
  event: string;
  details: JsonValue | null;
  createdAt: Date;
}

export interface UserNotificationSettings {
  id: number;
  userId: number;
  user?: User;
  type: string;
  disabledAt: Date;
}

export interface Webhook {
  id: number;
  url: string;
  notifyOn: string[];
  active: boolean;
  createdAt: Date;
  updatedAt: Date;
  userId: number;
  user?: User;
}

export interface Question {
  id: number;
  userId: number;
  user?: User;
  createdAt: Date;
  updatedAt: Date;
  title: string;
  content: string;
  selectedAnswerId: number | null;
  selectedAnswer?: Answer | null;
  tags?: TagsOnQuestions[];
  reactions?: QuestionReaction[];
  answers?: Answer[];
  metrics?: QuestionMetric[];
  rank?: QuestionRank | null;
  thread?: Thread | null;
}

export interface QuestionMetric {
  questionId: number;
  question?: Question;
  timeframe: MetricTimeframe;
  heartCount: number;
  commentCount: number;
  answerCount: number;
}

export interface Answer {
  id: number;
  questionId: number;
  question?: Question;
  userId: number;
  user?: User;
  content: string;
  createdAt: Date;
  updatedAt: Date;
  reactions?: AnswerReaction[];
  metrics?: AnswerMetric[];
  answerFor?: Question | null;
  votes?: AnswerVote[];
  rank?: AnswerRank | null;
  thread?: Thread | null;
}

export interface AnswerVote {
  answer?: Answer;
  answerId: number;
  user?: User;
  userId: number;
  vote: boolean | null;
  createdAt: Date;
}

export interface AnswerMetric {
  answerId: number;
  answer?: Answer;
  timeframe: MetricTimeframe;
  checkCount: number;
  crossCount: number;
  heartCount: number;
  commentCount: number;
}

export interface CommentV2 {
  id: number;
  content: string;
  createdAt: Date;
  updatedAt: Date;
  nsfw: boolean;
  tosViolation: boolean;
  userId: number;
  user?: User;
  threadId: number;
  thread?: Thread;
  childThread?: Thread | null;
  metadata: JsonValue | null;
  hidden: boolean | null;
  pinnedAt: Date | null;
  reactions?: CommentV2Reaction[];
  reports?: CommentV2Report[];
}

export interface Thread {
  id: number;
  locked: boolean;
  parentThreadId: number | null;
  parentThread?: Thread | null;
  rootThreadId: number | null;
  rootThread?: Thread | null;
  questionId: number | null;
  question?: Question | null;
  answerId: number | null;
  answer?: Answer | null;
  imageId: number | null;
  image?: Image | null;
  postId: number | null;
  post?: Post | null;
  reviewId: number | null;
  review?: ResourceReview | null;
  commentId: number | null;
  comment?: CommentV2 | null;
  modelId: number | null;
  model?: Model | null;
  articleId: number | null;
  article?: Article | null;
  bountyId: number | null;
  bounty?: Bounty | null;
  bountyEntryId: number | null;
  bountyEntry?: BountyEntry | null;
  clubPostId: number | null;
  clubPost?: ClubPost | null;
  metadata: JsonValue;
  comments?: CommentV2[];
  directChildren?: Thread[];
  children?: Thread[];
}

export interface QuestionReaction {
  id: number;
  question?: Question;
  questionId: number;
  user?: User;
  userId: number;
  reaction: ReviewReactions;
  createdAt: Date;
  updatedAt: Date;
}

export interface AnswerReaction {
  id: number;
  answer?: Answer;
  answerId: number;
  user?: User;
  userId: number;
  reaction: ReviewReactions;
  createdAt: Date;
  updatedAt: Date;
}

export interface CommentV2Reaction {
  id: number;
  comment?: CommentV2;
  commentId: number;
  user?: User;
  userId: number;
  reaction: ReviewReactions;
  createdAt: Date;
  updatedAt: Date;
}

export interface ImageReaction {
  id: number;
  imageId: number;
  image?: Image;
  userId: number;
  user?: User;
  reaction: ReviewReactions;
  createdAt: Date;
  updatedAt: Date;
}

export interface PostReaction {
  id: number;
  postId: number;
  post?: Post;
  userId: number;
  user?: User;
  reaction: ReviewReactions;
  createdAt: Date;
  updatedAt: Date;
}

export interface ArticleReaction {
  id: number;
  articleId: number;
  article?: Article;
  userId: number;
  user?: User;
  reaction: ReviewReactions;
  createdAt: Date;
  updatedAt: Date;
}

export interface TagEngagement {
  userId: number;
  user?: User;
  tagId: number;
  tag?: Tag;
  type: TagEngagementType;
  createdAt: Date;
}

export interface Announcement {
  id: number;
  title: string;
  content: string;
  emoji: string | null;
  color: string;
  createdAt: Date;
  updatedAt: Date;
  startsAt: Date | null;
  endsAt: Date | null;
  metadata: JsonValue | null;
  disabled: boolean;
}

export interface Cosmetic {
  id: number;
  name: string;
  description: string | null;
  videoUrl: string | null;
  type: CosmeticType;
  source: CosmeticSource;
  permanentUnlock: boolean;
  data: JsonValue;
  createdAt: Date | null;
  updatedAt: Date | null;
  availableStart: Date | null;
  availableEnd: Date | null;
  availableQuery: string | null;
  productId: string | null;
  leaderboardId: string | null;
  leaderboardPosition: number | null;
  UserCosmetic?: UserCosmetic[];
  purchases?: UserCosmeticShopPurchases[];
  cosmeticShopItems?: CosmeticShopItem[];
}

export interface UserCosmetic {
  userId: number;
  user?: User;
  cosmeticId: number;
  cosmetic?: Cosmetic;
  obtainedAt: Date;
  equippedAt: Date | null;
  data: JsonValue | null;
  claimKey: string;
  equippedToId: number | null;
  equippedToType: CosmeticEntity | null;
  forId: number | null;
  forType: CosmeticEntity | null;
}

export interface CosmeticShopSection {
  id: number;
  addedById: number | null;
  addedBy?: User | null;
  title: string;
  description: string | null;
  placement: number;
  meta: JsonValue;
  imageId: number | null;
  image?: Image | null;
  published: boolean;
  items?: CosmeticShopSectionItem[];
}

export interface CosmeticShopItem {
  id: number;
  cosmeticId: number;
  cosmetic?: Cosmetic;
  unitAmount: number;
  addedById: number | null;
  addedBy?: User | null;
  createdAt: Date;
  availableFrom: Date | null;
  availableTo: Date | null;
  availableQuantity: number | null;
  meta: JsonValue;
  title: string;
  description: string | null;
  archivedAt: Date | null;
  purchases?: UserCosmeticShopPurchases[];
  sections?: CosmeticShopSectionItem[];
}

export interface CosmeticShopSectionItem {
  shopItemId: number;
  shopItem?: CosmeticShopItem;
  shopSectionId: number;
  shopSection?: CosmeticShopSection;
  index: number;
  createdAt: Date;
}

export interface UserCosmeticShopPurchases {
  userId: number;
  user?: User;
  cosmeticId: number;
  cosmetic?: Cosmetic;
  shopItemId: number;
  shopItem?: CosmeticShopItem;
  unitAmount: number;
  purchasedAt: Date;
  buzzTransactionId: string;
  refunded: boolean;
}

export interface BuzzClaim {
  key: string;
  title: string;
  description: string;
  transactionIdQuery: string;
  amount: number;
  availableStart: Date | null;
  availableEnd: Date | null;
  claimed: number;
  limit: number | null;
  accountType: BuzzAccountType;
  useMultiplier: boolean;
}

export interface Article {
  id: number;
  createdAt: Date | null;
  updatedAt: Date | null;
  nsfw: boolean;
  tosViolation: boolean;
  metadata: JsonValue | null;
  title: string;
  content: string;
  cover: string | null;
  coverId: number | null;
  coverImage?: Image | null;
  publishedAt: Date | null;
  userId: number;
  user?: User;
  availability: Availability;
  unlisted: boolean;
  nsfwLevel: number;
  userNsfwLevel: number;
  lockedProperties: string[];
  status: ArticleStatus;
  thread?: Thread | null;
  reactions?: ArticleReaction[];
  tags?: TagsOnArticle[];
  reports?: ArticleReport[];
  metrics?: ArticleMetric[];
  rank?: ArticleRank | null;
  stats?: ArticleStat | null;
  engagements?: ArticleEngagement[];
  associations?: ModelAssociations[];
  collectionItems?: CollectionItem[];
}

export interface PressMention {
  id: number;
  title: string;
  url: string;
  source: string;
  publishedAt: Date;
  createdAt: Date;
}

export interface ArticleEngagement {
  userId: number;
  user?: User;
  articleId: number;
  article?: Article;
  type: ArticleEngagementType;
  createdAt: Date;
}

export interface ArticleMetric {
  article?: Article;
  articleId: number;
  timeframe: MetricTimeframe;
  likeCount: number;
  dislikeCount: number;
  laughCount: number;
  cryCount: number;
  heartCount: number;
  commentCount: number;
  viewCount: number;
  favoriteCount: number;
  hideCount: number;
  collectedCount: number;
  tippedCount: number;
  tippedAmountCount: number;
  updatedAt: Date;
}

export interface Leaderboard {
  id: string;
  index: number;
  title: string;
  description: string;
  scoringDescription: string;
  query: string;
  active: boolean;
  public: boolean;
  results?: LeaderboardResult[];
}

export interface LeaderboardResult {
  leaderboardId: string;
  leaderboard?: Leaderboard;
  date: Date;
  position: number;
  userId: number;
  user?: User;
  score: number;
  metrics: JsonValue;
  createdAt: Date;
}

export interface ModelVersionExploration {
  index: number;
  name: string;
  prompt: string;
  modelVersionId: number;
  modelVersion?: ModelVersion;
}

export interface GenerationServiceProvider {
  name: string;
  schedulers: GenerationSchedulers[];
}

export interface Collection {
  id: number;
  createdAt: Date | null;
  updatedAt: Date | null;
  name: string;
  description: string | null;
  nsfw: boolean | null;
  userId: number;
  user?: User;
  imageId: number | null;
  image?: Image | null;
  write: CollectionWriteConfiguration;
  read: CollectionReadConfiguration;
  type: CollectionType | null;
  mode: CollectionMode | null;
  metadata: JsonValue;
  availability: Availability;
  nsfwLevel: number;
  items?: CollectionItem[];
  contributors?: CollectionContributor[];
  tags?: TagsOnCollection[];
  post?: Post[];
  reports?: CollectionReport[];
  rank?: CollectionRank | null;
  stats?: CollectionStat | null;
  metrics?: CollectionMetric[];
}

export interface CollectionItem {
  id: number;
  createdAt: Date | null;
  updatedAt: Date | null;
  collectionId: number;
  collection?: Collection;
  articleId: number | null;
  article?: Article | null;
  postId: number | null;
  post?: Post | null;
  imageId: number | null;
  image?: Image | null;
  modelId: number | null;
  model?: Model | null;
  addedById: number | null;
  addedBy?: User | null;
  reviewedById: number | null;
  reviewedBy?: User | null;
  reviewedAt: Date | null;
  note: string | null;
  status: CollectionItemStatus;
  randomId: number | null;
  tagId: number | null;
  tag?: Tag | null;
  scores?: CollectionItemScore[];
}

export interface CollectionItemScore {
  userId: number;
  user?: User;
  collectionItemId: number;
  collectionItem?: CollectionItem;
  score: number;
  createdAt: Date;
}

export interface CollectionContributor {
  createdAt: Date | null;
  updatedAt: Date | null;
  userId: number;
  user?: User;
  collectionId: number;
  collection?: Collection;
  permissions: CollectionContributorPermission[];
}

export interface TagsOnCollection {
  collectionId: number;
  tagId: number;
  createdAt: Date | null;
  collection?: Collection;
  tag?: Tag;
  filterableOnly: boolean;
}

export interface HomeBlock {
  id: number;
  createdAt: Date | null;
  updatedAt: Date | null;
  userId: number;
  user?: User;
  metadata: JsonValue;
  index: number | null;
  type: HomeBlockType;
  permanent: boolean;
  sourceId: number | null;
  source?: HomeBlock | null;
  clones?: HomeBlock[];
}

export interface BuzzTip {
  entityType: string;
  entityId: number;
  toUserId: number;
  fromUserId: number;
  amount: number;
  createdAt: Date;
  updatedAt: Date;
}

export interface Bounty {
  id: number;
  userId: number | null;
  user?: User | null;
  name: string;
  description: string;
  startsAt: Date;
  expiresAt: Date;
  createdAt: Date;
  updatedAt: Date;
  details: JsonValue | null;
  mode: BountyMode;
  entryMode: BountyEntryMode;
  type: BountyType;
  minBenefactorUnitAmount: number;
  maxBenefactorUnitAmount: number | null;
  entryLimit: number;
  nsfw: boolean;
  poi: boolean;
  complete: boolean;
  refunded: boolean;
  availability: Availability;
  nsfwLevel: number;
  lockedProperties: string[];
  tags?: TagsOnBounty[];
  entries?: BountyEntry[];
  benefactors?: BountyBenefactor[];
  engagements?: BountyEngagement[];
  thread?: Thread | null;
  metrics?: BountyMetric[];
  rank?: BountyRank | null;
  stats?: BountyStat | null;
  reports?: BountyReport[];
}

export interface BountyEntry {
  id: number;
  userId: number | null;
  user?: User | null;
  bountyId: number;
  bounty?: Bounty;
  createdAt: Date;
  updatedAt: Date;
  locked: boolean;
  description: string | null;
  nsfwLevel: number;
  benefactors?: BountyBenefactor[];
  thread?: Thread | null;
  reactions?: BountyEntryReaction[];
  metrics?: BountyEntryMetric[];
  rank?: BountyEntryRank | null;
  stats?: BountyEntryStat | null;
  reports?: BountyEntryReport[];
}

export interface BountyEntryReaction {
  bountyEntry?: BountyEntry;
  bountyEntryId: number;
  user?: User;
  userId: number;
  reaction: ReviewReactions;
  createdAt: Date;
}

export interface BountyBenefactor {
  userId: number;
  user?: User;
  bountyId: number;
  bounty?: Bounty;
  unitAmount: number;
  createdAt: Date;
  updatedAt: Date;
  awardedAt: Date | null;
  awardedToId: number | null;
  awartedTo?: BountyEntry | null;
  currency: Currency;
}

export interface BountyEngagement {
  userId: number;
  user?: User;
  bountyId: number;
  bounty?: Bounty;
  type: BountyEngagementType;
  createdAt: Date;
}

export interface TipConnection {
  transactionId: string;
  entityId: number;
  entityType: string;
}

export interface BountyMetric {
  bounty?: Bounty;
  bountyId: number;
  timeframe: MetricTimeframe;
  favoriteCount: number;
  trackCount: number;
  entryCount: number;
  benefactorCount: number;
  unitAmountCount: number;
  commentCount: number;
  updatedAt: Date;
}

export interface BountyEntryMetric {
  bountyEntry?: BountyEntry;
  bountyEntryId: number;
  timeframe: MetricTimeframe;
  likeCount: number;
  dislikeCount: number;
  laughCount: number;
  cryCount: number;
  heartCount: number;
  unitAmountCount: number;
  tippedCount: number;
  tippedAmountCount: number;
  updatedAt: Date;
}

export interface CsamReport {
  id: number;
  userId: number | null;
  createdAt: Date;
  reportedById: number;
  reportSentAt: Date | null;
  archivedAt: Date | null;
  contentRemovedAt: Date | null;
  reportId: number | null;
  details: JsonValue;
  images: JsonValue;
  type: CsamReportType;
}

export interface Link {
  id: number;
  url: string;
  type: LinkType;
  entityId: number;
  entityType: string;
}

export interface EntityAccess {
  accessToId: number;
  accessToType: string;
  accessorId: number;
  accessorType: string;
  addedById: number;
  addedBy?: User;
  addedAt: Date;
  permissions: number;
  meta: JsonValue | null;
}

export interface EntityCollaborator {
  entityType: EntityType;
  entityId: number;
  userId: number;
  user?: User;
  status: EntityCollaboratorStatus;
  createdAt: Date;
  createdBy: number;
  creator?: User;
  lastMessageSentAt: Date | null;
}

export interface Club {
  id: number;
  userId: number;
  user?: User;
  coverImageId: number | null;
  coverImage?: Image | null;
  headerImageId: number | null;
  headerImage?: Image | null;
  avatarId: number | null;
  avatar?: Image | null;
  name: string;
  description: string;
  nsfw: boolean;
  billing: boolean;
  unlisted: boolean;
  tiers?: ClubTier[];
  memberships?: ClubMembership[];
  posts?: ClubPost[];
  adminInvites?: ClubAdminInvite[];
  admins?: ClubAdmin[];
  metrics?: ClubMetric[];
  rank?: ClubRank | null;
  stats?: ClubStat | null;
}

export interface ClubTier {
  id: number;
  clubId: number;
  club?: Club;
  unitAmount: number;
  currency: Currency;
  name: string;
  description: string;
  coverImageId: number | null;
  coverImage?: Image | null;
  unlisted: boolean;
  joinable: boolean;
  memberships?: ClubMembership[];
  downgradeMemberships?: ClubMembership[];
  createdAt: Date;
  updatedAt: Date | null;
  memberLimit: number | null;
  oneTimeFee: boolean;
}

export interface ClubAdminInvite {
  id: string;
  expiresAt: Date | null;
  clubId: number;
  club?: Club;
  createdAt: Date;
  permissions: ClubAdminPermission[];
}

export interface ClubAdmin {
  userId: number;
  user?: User;
  clubId: number;
  club?: Club;
  createdAt: Date;
  permissions: ClubAdminPermission[];
}

export interface ClubMembership {
  id: number;
  userId: number;
  user?: User;
  clubId: number;
  club?: Club;
  clubTierId: number;
  clubTier?: ClubTier;
  startedAt: Date;
  expiresAt: Date | null;
  cancelledAt: Date | null;
  nextBillingAt: Date;
  unitAmount: number;
  currency: Currency;
  downgradeClubTierId: number | null;
  downgradeClubTier?: ClubTier | null;
  billingPausedAt: Date | null;
}

export interface ClubMembershipCharge {
  id: number;
  userId: number;
  clubId: number;
  clubTierId: number;
  chargedAt: Date;
  status: string | null;
  invoiceId: string | null;
  unitAmount: number;
  unitAmountPurchased: number;
  currency: Currency;
}

export interface ClubPost {
  id: number;
  clubId: number;
  club?: Club;
  createdById: number;
  createdBy?: User;
  createdAt: Date;
  membersOnly: boolean;
  title: string | null;
  description: string | null;
  coverImageId: number | null;
  coverImage?: Image | null;
  entityId: number | null;
  entityType: string | null;
  thread?: Thread | null;
  reactions?: ClubPostReaction[];
  metrics?: ClubPostMetric[];
}

export interface ClubPostReaction {
  id: number;
  clubPostId: number;
  clubPost?: ClubPost;
  userId: number;
  user?: User;
  reaction: ReviewReactions;
  createdAt: Date;
  updatedAt: Date;
}

export interface ClubPostMetric {
  clubPost?: ClubPost;
  clubPostId: number;
  timeframe: MetricTimeframe;
  likeCount: number;
  dislikeCount: number;
  laughCount: number;
  cryCount: number;
  heartCount: number;
}

export interface ClubMetric {
  club?: Club;
  clubId: number;
  timeframe: MetricTimeframe;
  memberCount: number;
  clubPostCount: number;
  resourceCount: number;
}

export interface Chat {
  id: number;
  createdAt: Date;
  hash: string;
  ownerId: number;
  owner?: User;
  chatMembers?: ChatMember[];
  messages?: ChatMessage[];
  reports?: ChatReport[];
}

export interface ChatMember {
  id: number;
  createdAt: Date;
  userId: number;
  chatId: number;
  isOwner: boolean;
  isMuted: boolean;
  status: ChatMemberStatus;
  lastViewedMessageId: number | null;
  joinedAt: Date | null;
  ignoredAt: Date | null;
  leftAt: Date | null;
  kickedAt: Date | null;
  unkickedAt: Date | null;
  user?: User;
  chat?: Chat;
  lastViewedMessage?: ChatMessage | null;
}

export interface ChatMessage {
  id: number;
  createdAt: Date;
  userId: number;
  chatId: number;
  content: string;
  contentType: ChatMessageType;
  referenceMessageId: number | null;
  editedAt: Date | null;
  user?: User;
  chat?: Chat;
  referenceMessage?: ChatMessage | null;
  referenceMessages?: ChatMessage[];
  lastViewedMessages?: ChatMember[];
}

export interface BuildGuide {
  id: number;
  createdAt: Date;
  updatedAt: Date;
  name: string;
  message: string;
  userId: number;
  user?: User;
  components: JsonValue;
  capabilities: JsonValue;
}

export interface PurchasableReward {
  id: number;
  createdAt: Date;
  updatedAt: Date;
  title: string;
  unitPrice: number;
  about: string;
  redeemDetails: string;
  termsOfUse: string;
  usage: PurchasableRewardUsage;
  codes: string[];
  archived: boolean;
  availableFrom: Date | null;
  availableTo: Date | null;
  availableCount: number | null;
  addedById: number | null;
  addedBy?: User | null;
  coverImageId: number | null;
  coverImage?: Image | null;
  purchases?: UserPurchasedRewards[];
}

export interface UserPurchasedRewards {
  buzzTransactionId: string;
  userId: number | null;
  user?: User | null;
  purchasableRewardId: number | null;
  purchasableReward?: PurchasableReward | null;
  createdAt: Date;
  meta: JsonValue;
  code: string;
}

export interface JobQueue {
  type: JobQueueType;
  entityType: EntityType;
  entityId: number;
  createdAt: Date;
}

export interface VaultItem {
  id: number;
  vaultId: number;
  vault?: Vault;
  status: VaultItemStatus;
  files: JsonValue;
  modelVersionId: number;
  modelId: number;
  modelName: string;
  versionName: string;
  creatorId: number | null;
  creator?: User | null;
  creatorName: string;
  type: ModelType;
  baseModel: string;
  category: string;
  createdAt: Date;
  addedAt: Date;
  refreshedAt: Date | null;
  modelSizeKb: number;
  detailsSizeKb: number;
  imagesSizeKb: number;
  notes: string | null;
  meta: JsonValue;
}

export interface Vault {
  userId: number;
  user?: User;
  storageKb: number;
  createdAt: Date;
  updatedAt: Date;
  meta: JsonValue;
  items?: VaultItem[];
}

export interface RedeemableCode {
  code: string;
  unitValue: number;
  userId: number | null;
  user?: User | null;
  createdAt: Date;
  type: RedeemableCodeType;
  expiresAt: Date | null;
  redeemedAt: Date | null;
  transactionId: string | null;
}

export interface Tool {
  id: number;
  name: string;
  icon: string | null;
  createdAt: Date;
  enabled: boolean;
  unlisted: boolean;
  type: ToolType;
  domain: string | null;
  imageTools?: ImageTool[];
  priority: number | null;
  description: string | null;
  supported: boolean;
  company: string | null;
  metadata: JsonValue;
  alias: string | null;
}

export interface ImageTool {
  imageId: number;
  image?: Image;
  toolId: number;
  tool?: Tool;
  notes: string | null;
  createdAt: Date;
}

export interface Technique {
  id: number;
  name: string;
  createdAt: Date;
  enabled: boolean;
  type: TechniqueType;
  imageTechniques?: ImageTechnique[];
}

export interface ImageTechnique {
  imageId: number;
  image?: Image;
  techniqueId: number;
  technique?: Technique;
  notes: string | null;
  createdAt: Date;
}

export interface DonationGoal {
  id: number;
  userId: number;
  user?: User;
  title: string;
  description: string | null;
  goalAmount: number;
  paidAmount: number;
  modelVersionId: number | null;
  modelVersion?: ModelVersion | null;
  createdAt: Date;
  isEarlyAccess: boolean;
  active: boolean;
  donations?: Donation[];
}

export interface Donation {
  id: number;
  userId: number;
  user?: User;
  donationGoalId: number;
  donationGoal?: DonationGoal;
  amount: number;
  buzzTransactionId: string;
  notes: string | null;
  createdAt: Date;
}

export interface Blocklist {
  id: number;
  createdAt: Date;
  updatedAt: Date;
  type: string;
  data: string[];
}

export interface Appeal {
  id: number;
  userId: number;
  user?: User;
  entityType: EntityType;
  entityId: number;
  status: AppealStatus;
  appealMessage: string;
  createdAt: Date;
  updatedAt: Date;
  resolvedAt: Date | null;
  resolvedBy: number | null;
  resolvedByUser?: User | null;
  resolvedMessage: string | null;
  internalNotes: string | null;
  buzzTransactionId: string | null;
}

export interface QuestionRank {
  questionId: number;
  question?: Question;
  answerCountDay: number;
  answerCountWeek: number;
  answerCountMonth: number;
  answerCountYear: number;
  answerCountAllTime: number;
  heartCountDay: number;
  heartCountWeek: number;
  heartCountMonth: number;
  heartCountYear: number;
  heartCountAllTime: number;
  commentCountDay: number;
  commentCountWeek: number;
  commentCountMonth: number;
  commentCountYear: number;
  commentCountAllTime: number;
  answerCountDayRank: number;
  answerCountWeekRank: number;
  answerCountMonthRank: number;
  answerCountYearRank: number;
  answerCountAllTimeRank: number;
  heartCountDayRank: number;
  heartCountWeekRank: number;
  heartCountMonthRank: number;
  heartCountYearRank: number;
  heartCountAllTimeRank: number;
  commentCountDayRank: number;
  commentCountWeekRank: number;
  commentCountMonthRank: number;
  commentCountYearRank: number;
  commentCountAllTimeRank: number;
}

export interface AnswerRank {
  answerId: number;
  answer?: Answer;
  checkCountDay: number;
  checkCountWeek: number;
  checkCountMonth: number;
  checkCountYear: number;
  checkCountAllTime: number;
  crossCountDay: number;
  crossCountWeek: number;
  crossCountMonth: number;
  crossCountYear: number;
  crossCountAllTime: number;
  heartCountDay: number;
  heartCountWeek: number;
  heartCountMonth: number;
  heartCountYear: number;
  heartCountAllTime: number;
  commentCountDay: number;
  commentCountWeek: number;
  commentCountMonth: number;
  commentCountYear: number;
  commentCountAllTime: number;
  checkCountDayRank: number;
  checkCountWeekRank: number;
  checkCountMonthRank: number;
  checkCountYearRank: number;
  checkCountAllTimeRank: number;
  crossCountDayRank: number;
  crossCountWeekRank: number;
  crossCountMonthRank: number;
  crossCountYearRank: number;
  crossCountAllTimeRank: number;
  heartCountDayRank: number;
  heartCountWeekRank: number;
  heartCountMonthRank: number;
  heartCountYearRank: number;
  heartCountAllTimeRank: number;
  commentCountDayRank: number;
  commentCountWeekRank: number;
  commentCountMonthRank: number;
  commentCountYearRank: number;
  commentCountAllTimeRank: number;
}

export interface ModelReportStat {
  model?: Model;
  modelId: number;
  tosViolationPending: number;
  tosViolationUnactioned: number;
  tosViolationActioned: number;
  nsfwPending: number;
  nsfwUnactioned: number;
  nsfwActioned: number;
  ownershipPending: number;
  ownershipProcessing: number;
  ownershipActioned: number;
  ownershipUnactioned: number;
  adminAttentionPending: number;
  adminAttentionActioned: number;
  adminAttentionUnactioned: number;
  claimPending: number;
  claimActioned: number;
  claimUnactioned: number;
}

export interface ArticleStat {
  articleId: number;
  article?: Article;
  cryCountDay: number;
  cryCountWeek: number;
  cryCountMonth: number;
  cryCountYear: number;
  cryCountAllTime: number;
  dislikeCountDay: number;
  dislikeCountWeek: number;
  dislikeCountMonth: number;
  dislikeCountYear: number;
  dislikeCountAllTime: number;
  heartCountDay: number;
  heartCountWeek: number;
  heartCountMonth: number;
  heartCountYear: number;
  heartCountAllTime: number;
  laughCountDay: number;
  laughCountWeek: number;
  laughCountMonth: number;
  laughCountYear: number;
  laughCountAllTime: number;
  likeCountDay: number;
  likeCountWeek: number;
  likeCountMonth: number;
  likeCountYear: number;
  likeCountAllTime: number;
  commentCountDay: number;
  commentCountWeek: number;
  commentCountMonth: number;
  commentCountYear: number;
  commentCountAllTime: number;
  reactionCountDay: number;
  reactionCountWeek: number;
  reactionCountMonth: number;
  reactionCountYear: number;
  reactionCountAllTime: number;
  viewCountDay: number;
  viewCountWeek: number;
  viewCountMonth: number;
  viewCountYear: number;
  viewCountAllTime: number;
  favoriteCountDay: number;
  favoriteCountWeek: number;
  favoriteCountMonth: number;
  favoriteCountYear: number;
  favoriteCountAllTime: number;
  collectedCountDay: number;
  collectedCountWeek: number;
  collectedCountMonth: number;
  collectedCountYear: number;
  collectedCountAllTime: number;
  hideCountDay: number;
  hideCountWeek: number;
  hideCountMonth: number;
  hideCountYear: number;
  hideCountAllTime: number;
  tippedCountDay: number;
  tippedCountWeek: number;
  tippedCountMonth: number;
  tippedCountYear: number;
  tippedCountAllTime: number;
  tippedAmountCountDay: number;
  tippedAmountCountWeek: number;
  tippedAmountCountMonth: number;
  tippedAmountCountYear: number;
  tippedAmountCountAllTime: number;
}

export interface ArticleRank {
  articleId: number;
  article?: Article;
  cryCountDayRank: number;
  cryCountWeekRank: number;
  cryCountMonthRank: number;
  cryCountYearRank: number;
  cryCountAllTimeRank: number;
  dislikeCountDayRank: number;
  dislikeCountWeekRank: number;
  dislikeCountMonthRank: number;
  dislikeCountYearRank: number;
  dislikeCountAllTimeRank: number;
  heartCountDayRank: number;
  heartCountWeekRank: number;
  heartCountMonthRank: number;
  heartCountYearRank: number;
  heartCountAllTimeRank: number;
  laughCountDayRank: number;
  laughCountWeekRank: number;
  laughCountMonthRank: number;
  laughCountYearRank: number;
  laughCountAllTimeRank: number;
  likeCountDayRank: number;
  likeCountWeekRank: number;
  likeCountMonthRank: number;
  likeCountYearRank: number;
  likeCountAllTimeRank: number;
  commentCountDayRank: number;
  commentCountWeekRank: number;
  commentCountMonthRank: number;
  commentCountYearRank: number;
  commentCountAllTimeRank: number;
  reactionCountDayRank: number;
  reactionCountWeekRank: number;
  reactionCountMonthRank: number;
  reactionCountYearRank: number;
  reactionCountAllTimeRank: number;
  viewCountDayRank: number;
  viewCountWeekRank: number;
  viewCountMonthRank: number;
  viewCountYearRank: number;
  viewCountAllTimeRank: number;
  favoriteCountDayRank: number;
  favoriteCountWeekRank: number;
  favoriteCountMonthRank: number;
  favoriteCountYearRank: number;
  favoriteCountAllTimeRank: number;
  hideCountDayRank: number;
  hideCountWeekRank: number;
  hideCountMonthRank: number;
  hideCountYearRank: number;
  hideCountAllTimeRank: number;
  collectedCountDayRank: number;
  collectedCountWeekRank: number;
  collectedCountMonthRank: number;
  collectedCountYearRank: number;
  collectedCountAllTimeRank: number;
  tippedCountDayRank: number;
  tippedCountWeekRank: number;
  tippedCountMonthRank: number;
  tippedCountYearRank: number;
  tippedCountAllTimeRank: number;
  tippedAmountCountDayRank: number;
  tippedAmountCountWeekRank: number;
  tippedAmountCountMonthRank: number;
  tippedAmountCountYearRank: number;
  tippedAmountCountAllTimeRank: number;
}

export interface UserStat {
  user?: User;
  userId: number;
  uploadCountDay: number;
  uploadCountWeek: number;
  uploadCountMonth: number;
  uploadCountYear: number;
  uploadCountAllTime: number;
  reviewCountDay: number;
  reviewCountWeek: number;
  reviewCountMonth: number;
  reviewCountYear: number;
  reviewCountAllTime: number;
  downloadCountDay: number;
  downloadCountWeek: number;
  downloadCountMonth: number;
  downloadCountYear: number;
  downloadCountAllTime: number;
  generationCountDay: number;
  generationCountWeek: number;
  generationCountMonth: number;
  generationCountYear: number;
  generationCountAllTime: number;
  ratingCountDay: number;
  ratingCountWeek: number;
  ratingCountMonth: number;
  ratingCountYear: number;
  ratingCountAllTime: number;
  followingCountDay: number;
  followingCountWeek: number;
  followingCountMonth: number;
  followingCountYear: number;
  followingCountAllTime: number;
  followerCountDay: number;
  followerCountWeek: number;
  followerCountMonth: number;
  followerCountYear: number;
  followerCountAllTime: number;
  hiddenCountDay: number;
  hiddenCountWeek: number;
  hiddenCountMonth: number;
  hiddenCountYear: number;
  hiddenCountAllTime: number;
  ratingDay: number;
  ratingWeek: number;
  ratingMonth: number;
  ratingYear: number;
  ratingAllTime: number;
  favoriteCountDay: number;
  favoriteCountWeek: number;
  favoriteCountMonth: number;
  favoriteCountYear: number;
  favoriteCountAllTime: number;
  answerCountDay: number;
  answerCountWeek: number;
  answerCountMonth: number;
  answerCountYear: number;
  answerCountAllTime: number;
  answerAcceptCountDay: number;
  answerAcceptCountWeek: number;
  answerAcceptCountMonth: number;
  answerAcceptCountYear: number;
  answerAcceptCountAllTime: number;
  thumbsUpCountDay: number;
  thumbsUpCountWeek: number;
  thumbsUpCountMonth: number;
  thumbsUpCountYear: number;
  thumbsUpCountAllTime: number;
  thumbsDownCountDay: number;
  thumbsDownCountWeek: number;
  thumbsDownCountMonth: number;
  thumbsDownCountYear: number;
  thumbsDownCountAllTime: number;
  reactionCountDay: number;
  reactionCountWeek: number;
  reactionCountMonth: number;
  reactionCountYear: number;
  reactionCountAllTime: number;
}

export interface UserRank {
  user?: User;
  userId: number;
  downloadCountDayRank: number;
  downloadCountWeekRank: number;
  downloadCountMonthRank: number;
  downloadCountYearRank: number;
  downloadCountAllTimeRank: number;
  ratingCountDayRank: number;
  ratingCountWeekRank: number;
  ratingCountMonthRank: number;
  ratingCountYearRank: number;
  ratingCountAllTimeRank: number;
  followerCountDayRank: number;
  followerCountWeekRank: number;
  followerCountMonthRank: number;
  followerCountYearRank: number;
  followerCountAllTimeRank: number;
  ratingDayRank: number;
  ratingWeekRank: number;
  ratingMonthRank: number;
  ratingYearRank: number;
  ratingAllTimeRank: number;
  favoriteCountDayRank: number;
  favoriteCountWeekRank: number;
  favoriteCountMonthRank: number;
  favoriteCountYearRank: number;
  favoriteCountAllTimeRank: number;
  answerCountDayRank: number;
  answerCountWeekRank: number;
  answerCountMonthRank: number;
  answerCountYearRank: number;
  answerCountAllTimeRank: number;
  answerAcceptCountDayRank: number;
  answerAcceptCountWeekRank: number;
  answerAcceptCountMonthRank: number;
  answerAcceptCountYearRank: number;
  answerAcceptCountAllTimeRank: number;
  thumbsUpCountDayRank: number;
  thumbsUpCountWeekRank: number;
  thumbsUpCountMonthRank: number;
  thumbsUpCountYearRank: number;
  thumbsUpCountAllTimeRank: number;
  thumbsDownCountDayRank: number;
  thumbsDownCountWeekRank: number;
  thumbsDownCountMonthRank: number;
  thumbsDownCountYearRank: number;
  thumbsDownCountAllTimeRank: number;
  leaderboardRank: number | null;
  leaderboardId: string | null;
  leaderboardTitle: string | null;
  leaderboardCosmetic: string | null;
}

export interface TagStat {
  tag?: Tag;
  tagId: number;
  followerCountDay: number;
  followerCountWeek: number;
  followerCountMonth: number;
  followerCountYear: number;
  followerCountAllTime: number;
  hiddenCountDay: number;
  hiddenCountWeek: number;
  hiddenCountMonth: number;
  hiddenCountYear: number;
  hiddenCountAllTime: number;
  modelCountDay: number;
  modelCountWeek: number;
  modelCountMonth: number;
  modelCountYear: number;
  modelCountAllTime: number;
  imageCountDay: number;
  imageCountWeek: number;
  imageCountMonth: number;
  imageCountYear: number;
  imageCountAllTime: number;
  postCountDay: number;
  postCountWeek: number;
  postCountMonth: number;
  postCountYear: number;
  postCountAllTime: number;
}

export interface TagRank {
  tag?: Tag;
  tagId: number;
  followerCountDayRank: number;
  followerCountWeekRank: number;
  followerCountMonthRank: number;
  followerCountYearRank: number;
  followerCountAllTimeRank: number;
  hiddenCountDayRank: number;
  hiddenCountWeekRank: number;
  hiddenCountMonthRank: number;
  hiddenCountYearRank: number;
  hiddenCountAllTimeRank: number;
  modelCountDayRank: number;
  modelCountWeekRank: number;
  modelCountMonthRank: number;
  modelCountYearRank: number;
  modelCountAllTimeRank: number;
  imageCountDayRank: number;
  imageCountWeekRank: number;
  imageCountMonthRank: number;
  imageCountYearRank: number;
  imageCountAllTimeRank: number;
  postCountDayRank: number;
  postCountWeekRank: number;
  postCountMonthRank: number;
  postCountYearRank: number;
  postCountAllTimeRank: number;
  articleCountDayRank: number;
  articleCountWeekRank: number;
  articleCountMonthRank: number;
  articleCountYearRank: number;
  articleCountAllTimeRank: number;
}

export interface ImageStat {
  imageId: number;
  image?: Image;
  cryCountDay: number;
  cryCountWeek: number;
  cryCountMonth: number;
  cryCountYear: number;
  cryCountAllTime: number;
  dislikeCountDay: number;
  dislikeCountWeek: number;
  dislikeCountMonth: number;
  dislikeCountYear: number;
  dislikeCountAllTime: number;
  heartCountDay: number;
  heartCountWeek: number;
  heartCountMonth: number;
  heartCountYear: number;
  heartCountAllTime: number;
  laughCountDay: number;
  laughCountWeek: number;
  laughCountMonth: number;
  laughCountYear: number;
  laughCountAllTime: number;
  likeCountDay: number;
  likeCountWeek: number;
  likeCountMonth: number;
  likeCountYear: number;
  likeCountAllTime: number;
  commentCountDay: number;
  commentCountWeek: number;
  commentCountMonth: number;
  commentCountYear: number;
  commentCountAllTime: number;
  reactionCountDay: number;
  reactionCountWeek: number;
  reactionCountMonth: number;
  reactionCountYear: number;
  reactionCountAllTime: number;
  collectedCountDay: number;
  collectedCountWeek: number;
  collectedCountMonth: number;
  collectedCountYear: number;
  collectedCountAllTime: number;
  tippedCountDay: number;
  tippedCountWeek: number;
  tippedCountMonth: number;
  tippedCountYear: number;
  tippedCountAllTime: number;
  tippedAmountCountDay: number;
  tippedAmountCountWeek: number;
  tippedAmountCountMonth: number;
  tippedAmountCountYear: number;
  tippedAmountCountAllTime: number;
  viewCountDay: number;
  viewCountWeek: number;
  viewCountMonth: number;
  viewCountYear: number;
  viewCountAllTime: number;
}

export interface ImageModHelper {
  imageId: number;
  image?: Image;
  assessedNSFW: boolean | null;
  nsfwReportCount: number;
}

export interface ModelHash {
  modelId: number;
  model?: Model;
  modelVersionId: number;
  modelVersion?: ModelVersion;
  hashType: ModelHashType;
  fileType: string;
  hash: string;
}

export interface PostHelper {
  postId: number;
  post?: Post;
  scanned: boolean;
}

export interface PostStat {
  postId: number;
  post?: Post;
  cryCountDay: number;
  cryCountWeek: number;
  cryCountMonth: number;
  cryCountYear: number;
  cryCountAllTime: number;
  dislikeCountDay: number;
  dislikeCountWeek: number;
  dislikeCountMonth: number;
  dislikeCountYear: number;
  dislikeCountAllTime: number;
  heartCountDay: number;
  heartCountWeek: number;
  heartCountMonth: number;
  heartCountYear: number;
  heartCountAllTime: number;
  laughCountDay: number;
  laughCountWeek: number;
  laughCountMonth: number;
  laughCountYear: number;
  laughCountAllTime: number;
  likeCountDay: number;
  likeCountWeek: number;
  likeCountMonth: number;
  likeCountYear: number;
  likeCountAllTime: number;
  commentCountDay: number;
  commentCountWeek: number;
  commentCountMonth: number;
  commentCountYear: number;
  commentCountAllTime: number;
  reactionCountDay: number;
  reactionCountWeek: number;
  reactionCountMonth: number;
  reactionCountYear: number;
  reactionCountAllTime: number;
}

export interface CollectionStat {
  collection?: Collection;
  collectionId: number;
  followerCountDay: number;
  followerCountWeek: number;
  followerCountMonth: number;
  followerCountYear: number;
  followerCountAllTime: number;
  itemCountDay: number;
  itemCountWeek: number;
  itemCountMonth: number;
  itemCountYear: number;
  itemCountAllTime: number;
  contributorCountDay: number;
  contributorCountWeek: number;
  contributorCountMonth: number;
  contributorCountYear: number;
  contributorCountAllTime: number;
}

export interface CollectionRank {
  collectionId: number;
  collection?: Collection;
  followerCountDayRank: number;
  followerCountWeekRank: number;
  followerCountMonthRank: number;
  followerCountYearRank: number;
  followerCountAllTimeRank: number;
  itemCountDayRank: number;
  itemCountWeekRank: number;
  itemCountMonthRank: number;
  itemCountYearRank: number;
  itemCountAllTimeRank: number;
  contributorCountDayRank: number;
  contributorCountWeekRank: number;
  contributorCountMonthRank: number;
  contributorCountYearRank: number;
  contributorCountAllTimeRank: number;
}

export interface ImageTag {
  imageId: number;
  image?: Image;
  tagId: number;
  tag?: Tag;
  tagName: string;
  tagType: TagType;
  tagNsfw: NsfwLevel;
  tagNsfwLevel: number;
  automated: boolean;
  confidence: number | null;
  score: number;
  upVotes: number;
  downVotes: number;
  needsReview: boolean;
  concrete: boolean;
  lastUpvote: Date | null;
  source: TagSource;
}

export interface ModelTag {
  modelId: number;
  model?: Model;
  tagId: number;
  tag?: Tag;
  tagName: string;
  tagType: TagType;
  score: number;
  upVotes: number;
  downVotes: number;
  needsReview: boolean;
}

export interface ImageResourceHelper {
  id: number;
  imageId: number;
  image?: Image;
  reviewId: number | null;
  reviewRating: number | null;
  reviewDetails: string | null;
  reviewCreatedAt: Date | null;
  name: string | null;
  hash: string | null;
  modelVersionId: number | null;
  modelVersionName: string | null;
  modelVersionCreatedAt: Date | null;
  modelId: number | null;
  modelName: string | null;
  modelDownloadCount: number | null;
  modelCommentCount: number | null;
  modelThumbsUpCount: number | null;
  modelThumbsDownCount: number | null;
  modelType: ModelType | null;
  modelVersionBaseModel: string | null;
  detected: boolean | null;
}

export interface PostResourceHelper {
  id: number;
  postId: number;
  post?: Post;
  reviewId: number | null;
  reviewRating: number | null;
  reviewRecommended: boolean | null;
  reviewDetails: string | null;
  reviewCreatedAt: Date | null;
  name: string | null;
  modelVersionId: number | null;
  modelVersionName: string | null;
  modelVersionCreatedAt: Date | null;
  modelId: number | null;
  modelName: string | null;
  modelDownloadCount: number | null;
  modelCommentCount: number | null;
  modelThumbsUpCount: number | null;
  modelThumbsDownCount: number | null;
  modelType: ModelType | null;
}

export interface PostImageTag {
  postId: number;
  post?: Post;
  tagId: number;
}

export interface PostTag {
  postId: number;
  post?: Post;
  tagId: number;
  tag?: Tag;
  tagName: string;
  tagType: TagType;
  score: number;
  upVotes: number;
  downVotes: number;
}

export interface ResourceReviewHelper {
  resourceReviewId: number;
  resourceReview?: ResourceReview;
  imageCount: number;
}

export interface GenerationCoverage {
  modelId: number;
  model?: Model;
  modelVersionId: number;
  modelVersion?: ModelVersion;
  covered: boolean;
}

export interface UserProfile {
  userId: number;
  user?: User;
  coverImageId: number | null;
  coverImage?: Image | null;
  bio: string | null;
  message: string | null;
  messageAddedAt: Date | null;
  location: string | null;
  nsfw: boolean;
  privacySettings: JsonValue;
  profileSectionsSettings: JsonValue;
  showcaseItems: JsonValue;
}

export interface BountyStat {
  bountyId: number;
  Bounty?: Bounty;
  favoriteCountDay: number;
  favoriteCountWeek: number;
  favoriteCountMonth: number;
  favoriteCountYear: number;
  favoriteCountAllTime: number;
  trackCountDay: number;
  trackCountWeek: number;
  trackCountMonth: number;
  trackCountYear: number;
  trackCountAllTime: number;
  entryCountDay: number;
  entryCountWeek: number;
  entryCountMonth: number;
  entryCountYear: number;
  entryCountAllTime: number;
  benefactorCountDay: number;
  benefactorCountWeek: number;
  benefactorCountMonth: number;
  benefactorCountYear: number;
  benefactorCountAllTime: number;
  unitAmountCountDay: number;
  unitAmountCountWeek: number;
  unitAmountCountMonth: number;
  unitAmountCountYear: number;
  unitAmountCountAllTime: number;
  commentCountDay: number;
  commentCountWeek: number;
  commentCountMonth: number;
  commentCountYear: number;
  commentCountAllTime: number;
}

export interface BountyRank {
  bountyId: number;
  Bounty?: Bounty;
  favoriteCountDayRank: number;
  favoriteCountWeekRank: number;
  favoriteCountMonthRank: number;
  favoriteCountYearRank: number;
  favoriteCountAllTimeRank: number;
  trackCountDayRank: number;
  trackCountWeekRank: number;
  trackCountMonthRank: number;
  trackCountYearRank: number;
  trackCountAllTimeRank: number;
  entryCountDayRank: number;
  entryCountWeekRank: number;
  entryCountMonthRank: number;
  entryCountYearRank: number;
  entryCountAllTimeRank: number;
  benefactorCountDayRank: number;
  benefactorCountWeekRank: number;
  benefactorCountMonthRank: number;
  benefactorCountYearRank: number;
  benefactorCountAllTimeRank: number;
  unitAmountCountDayRank: number;
  unitAmountCountWeekRank: number;
  unitAmountCountMonthRank: number;
  unitAmountCountYearRank: number;
  unitAmountCountAllTimeRank: number;
  commentCountDayRank: number;
  commentCountWeekRank: number;
  commentCountMonthRank: number;
  commentCountYearRank: number;
  commentCountAllTimeRank: number;
}

export interface BountyEntryStat {
  bountyEntryId: number;
  BountyEntry?: BountyEntry;
  cryCountDay: number;
  cryCountWeek: number;
  cryCountMonth: number;
  cryCountYear: number;
  cryCountAllTime: number;
  dislikeCountDay: number;
  dislikeCountWeek: number;
  dislikeCountMonth: number;
  dislikeCountYear: number;
  dislikeCountAllTime: number;
  heartCountDay: number;
  heartCountWeek: number;
  heartCountMonth: number;
  heartCountYear: number;
  heartCountAllTime: number;
  laughCountDay: number;
  laughCountWeek: number;
  laughCountMonth: number;
  laughCountYear: number;
  laughCountAllTime: number;
  likeCountDay: number;
  likeCountWeek: number;
  likeCountMonth: number;
  likeCountYear: number;
  likeCountAllTime: number;
  reactionCountDay: number;
  reactionCountWeek: number;
  reactionCountMonth: number;
  reactionCountYear: number;
  reactionCountAllTime: number;
  unitAmountCountDay: number;
  unitAmountCountWeek: number;
  unitAmountCountMonth: number;
  unitAmountCountYear: number;
  unitAmountCountAllTime: number;
  tippedCountDay: number;
  tippedCountWeek: number;
  tippedCountMonth: number;
  tippedCountYear: number;
  tippedCountAllTime: number;
  tippedAmountCountDay: number;
  tippedAmountCountWeek: number;
  tippedAmountCountMonth: number;
  tippedAmountCountYear: number;
  tippedAmountCountAllTime: number;
}

export interface BountyEntryRank {
  bountyEntryId: number;
  BountyEntry?: BountyEntry;
  cryCountDayRank: number;
  cryCountWeekRank: number;
  cryCountMonthRank: number;
  cryCountYearRank: number;
  cryCountAllTimeRank: number;
  dislikeCountDayRank: number;
  dislikeCountWeekRank: number;
  dislikeCountMonthRank: number;
  dislikeCountYearRank: number;
  dislikeCountAllTimeRank: number;
  heartCountDayRank: number;
  heartCountWeekRank: number;
  heartCountMonthRank: number;
  heartCountYearRank: number;
  heartCountAllTimeRank: number;
  laughCountDayRank: number;
  laughCountWeekRank: number;
  laughCountMonthRank: number;
  laughCountYearRank: number;
  laughCountAllTimeRank: number;
  likeCountDayRank: number;
  likeCountWeekRank: number;
  likeCountMonthRank: number;
  likeCountYearRank: number;
  likeCountAllTimeRank: number;
  reactionCountDayRank: number;
  reactionCountWeekRank: number;
  reactionCountMonthRank: number;
  reactionCountYearRank: number;
  reactionCountAllTimeRank: number;
  unitAmountCountDayRank: number;
  unitAmountCountWeekRank: number;
  unitAmountCountMonthRank: number;
  unitAmountCountYearRank: number;
  unitAmountCountAllTimeRank: number;
  tippedCountDayRank: number;
  tippedCountWeekRank: number;
  tippedCountMonthRank: number;
  tippedCountYearRank: number;
  tippedCountAllTimeRank: number;
  tippedAmountCountDayRank: number;
  tippedAmountCountWeekRank: number;
  tippedAmountCountMonthRank: number;
  tippedAmountCountYearRank: number;
  tippedAmountCountAllTimeRank: number;
}

export interface ClubStat {
  clubId: number;
  Club?: Club;
  memberCountDay: number;
  memberCountWeek: number;
  memberCountMonth: number;
  memberCountYear: number;
  memberCountAllTime: number;
  resourceCountDay: number;
  resourceCountWeek: number;
  resourceCountMonth: number;
  resourceCountYear: number;
  resourceCountAllTime: number;
  clubPostCountDay: number;
  clubPostCountWeek: number;
  clubPostCountMonth: number;
  clubPostCountYear: number;
  clubPostCountAllTime: number;
}

export interface ClubRank {
  clubId: number;
  Club?: Club;
  memberCountDayRank: number;
  memberCountWeekRank: number;
  memberCountMonthRank: number;
  memberCountYearRank: number;
  memberCountAllTimeRank: number;
  resourceCountDayRank: number;
  resourceCountWeekRank: number;
  resourceCountMonthRank: number;
  resourceCountYearRank: number;
  resourceCountAllTimeRank: number;
  clubPostCountDayRank: number;
  clubPostCountWeekRank: number;
  clubPostCountMonthRank: number;
  clubPostCountYearRank: number;
  clubPostCountAllTimeRank: number;
}

export interface EntityMetric {
  entityType: EntityMetric_EntityType_Type;
  entityId: number;
  metricType: EntityMetric_MetricType_Type;
  metricValue: number;
}

export interface EntityMetricImage {
  imageId: number;
  reactionLike: number | null;
  reactionHeart: number | null;
  reactionLaugh: number | null;
  reactionCry: number | null;
  reactionTotal: number | null;
  comment: number | null;
  collection: number | null;
  buzz: number | null;
}

type JsonValue = string | number | boolean | { [key in string]?: JsonValue } | Array<JsonValue> | null;
